import os

def parse_file(file_path):
    with open(file_path, 'r') as file:
        lines = file.readlines()
    
    # Assuming the last line of the file contains the list of values
    values_line = lines[-1]
    
    # Extracting the list of values
    values_str = values_line.replace('[', '').replace(']', '').split(', ')
    values = [float(value) for value in values_str]
    
    # Extracting the average silhouette score
    average_silhouette_score = float(lines[0].split(': ')[1])
    
    return average_silhouette_score, values

def calculate_sum(window, compression, base_path='C:\Users\tony7\Desktop\Updated Measurements\1.1Kmeans INTEL'):
    sum_values = [0.0, 0.0, 0.0, 0.0, 0.0]  # Sum of DCT, DFT, DWT, PAA, MINE values
    
    # Iterate through Kmeans Humidities Measurements to Kmeans Voltages Measurements
    for folder_name in ["Kmeans Humidities Measurements(k = 2)", 
                        "Kmeans Lights Measurements(k = 2)", 
                        "Kmeans Temperatures Measurements(k = 4)", 
                        "Kmeans Voltages Measurements(k = 2)"]:
        
        file_path = os.path.join(base_path, folder_name)
        
        # Construct the path to the specified window and compression folders
        window_path = os.path.join(file_path, f'stride({window})')
        compression_path = os.path.join(window_path, f'compression({compression})')
        
        # Iterate through text files
        for method_file in os.listdir(compression_path):
            if method_file.endswith('.txt'):
                method_file_path = os.path.join(compression_path, method_file)
                
                # Parse the file
                avg_score, values = parse_file(method_file_path)
                
                # Add values to the sum
                sum_values = [sum_val + avg_score for sum_val, avg_score in zip(sum_values, values)]
    
    return sum_values

# Example usage:
window_value = 16
compression_value = 4
result = calculate_sum(window_value, compression_value)

print(f'Sum of average values for DCT, DFT, DWT, PAA, MINE: {result}')import os

def parse_file(file_path):
    with open(file_path, 'r') as file:
        lines = file.readlines()
    
    # Assuming the last line of the file contains the list of values
    values_line = lines[-1]
    
    # Extracting the list of values
    values_str = values_line.replace('[', '').replace(']', '').split(', ')
    values = [float(value) for value in values_str]
    
    # Extracting the average silhouette score
    average_silhouette_score = float(lines[0].split(': ')[1])
    
    return average_silhouette_score, values

def calculate_sum(window, compression, base_path='C:\Users\tony7\Desktop\Updated Measurements\1.1Kmeans INTEL'):
    sum_values = [0.0, 0.0, 0.0, 0.0, 0.0]  # Sum of DCT, DFT, DWT, PAA, MINE values
    
    # Iterate through Kmeans Humidities Measurements to Kmeans Voltages Measurements
    for folder_name in ["Kmeans Humidities Measurements(k = 2)", 
                        "Kmeans Lights Measurements(k = 2)", 
                        "Kmeans Temperatures Measurements(k = 4)", 
                        "Kmeans Voltages Measurements(k = 2)"]:
        
        file_path = os.path.join(base_path, folder_name)
        
        # Construct the path to the specified window and compression folders
        window_path = os.path.join(file_path, f'stride({window})')
        compression_path = os.path.join(window_path, f'compression({compression})')
        
        # Iterate through text files
        for method_file in os.listdir(compression_path):
            if method_file.endswith('.txt'):
                method_file_path = os.path.join(compression_path, method_file)
                
                # Parse the file
                avg_score, values = parse_file(method_file_path)
                
                # Add values to the sum
                sum_values = [sum_val + avg_score for sum_val, avg_score in zip(sum_values, values)]
    
    return sum_values

# Example usage:
window_value = 16
compression_value = 4
result = calculate_sum(window_value, compression_value)

print(f'Sum of average values for DCT, DFT, DWT, PAA, MINE: {result}')